using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Stock
{
	#region Fields
	private string name;
	private float pricePerShare;
	private int sharesOwned;
	private float incomePerShare;
	private float totalIncome;
	#endregion

	#region Properties
	public string Name { get { return name; } }
	public float PricePerShare { get { return pricePerShare; } }
	public int SharesOwned { get { return sharesOwned; } }
	public float IncomePerShare { get { return incomePerShare; } }
	public float TotalIncome { get { return totalIncome; } }
	#endregion

	#region Constructor
	/// <summary>
	/// Create a new Stock
	/// </summary>
	/// <param name="name">The name of the stock</param>
	/// <param name="pricePerShare">The initial amount each share of this stock counts</param>
	/// <param name="startingShares">The starting number of shares the player owns</param>
	/// <param name="incomePerShare">The amount of income each share of this stock generates passively</param>
	public Stock(string name, float pricePerShare, int startingShares, float incomePerShare)
	{
		this.name = name;
		this.pricePerShare = pricePerShare;
		sharesOwned = startingShares;
		this.incomePerShare = incomePerShare;
		totalIncome = sharesOwned * incomePerShare;
	}
	#endregion
	
	#region Methods
	/// <summary>
	/// Buys shares of the current stock
	/// </summary>
	/// <param name="sharesBought">The number of shares bought</param>
	public void BuyStock(int sharesBought)
	{
		// Check if the player has enough money to buy shares
		float totalCost = pricePerShare * sharesBought;
		float money = GameObject.Find("GameManager").GetComponent<GameManager>().money;
		if(money < totalCost) {
			Debug.Log("Cannot buy " + sharesBought + " shares of " + name + ". Cost: $" + totalCost + " | Money: $" + money);
			return;
		}

		sharesOwned += sharesBought;
		money -= totalCost;
		GameObject.Find("GameManager").GetComponent<GameManager>().money = money;
		Debug.Log(sharesBought + " shares of " + name + " bought for $" + totalCost + " at $" + pricePerShare + " per share.");

		// Recalculates the total income generated by all of the shares of the stock
		totalIncome = sharesOwned * incomePerShare;
	}
	/// <summary>
	/// Overloaded method to buy 1 share
	/// </summary>
	public void BuyStock()
	{
		BuyStock(1);
	}
	#endregion
}
